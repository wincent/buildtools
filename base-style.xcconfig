// base-style.xcconfig
// Settings common to all build styles
//
// Copyright 2006-2010 Wincent Colaiuta. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// "Build Products Path"
SYMROOT                             = $(SRCROOT)/../../build

// "Intermediate Build Files Path"
OBJROOT                             = $(SYMROOT)

// buildtools is usually installed as a Git submodule within the SRCROOT
BUILDTOOLS_DIR                      = $(SRCROOT)/buildtools

// for the Xcode UI define SDKROOT (not just the arch-specific variants)
MACOSX_DEPLOYMENT_TARGET            = 10.6
SDKROOT                             = /Developer/SDKs/MacOSX10.6.sdk

GCC_VERSION                         = com.apple.compilers.llvm.clang.1_0
GCC_C_LANGUAGE_STANDARD             = gnu99
GCC_ENABLE_OBJC_EXCEPTIONS          = YES
GCC_ENABLE_CPP_EXCEPTIONS           = NO
GCC_ENABLE_CPP_RTTI                 = NO
GCC_PRECOMPILE_PREFIX_HEADER        = YES

WARNING_CFLAGS                      = -Wall -Wno-unused-parameter

INFOPLIST_PREPROCESS                = YES
INFOPLIST_PREPROCESSOR_DEFINITIONS  = WO_PREPROCESSING_FOR_INFO_PLIST

// prevent URLs (which contain "//") in property lists getting mangled when the preprocessor strips comments
INFOPLIST_OTHER_PREPROCESSOR_FLAGS  = -traditional

// BUG: this can cause linker errors on first build: example
//
// Ld /Users/wincent/trabajo/build-intermediates/WOTest.build/Release/WOTestRunner.build/Objects-normal/ppc/WOTestRunner normal ppc
//    cd /Users/wincent/trabajo/WOTest/src
//    /usr/bin/gcc-4.0 -o /Users/wincent/trabajo/build-intermediates/WOTest.build/Release/WOTestRunner.build/Objects-normal/ppc/WOTestRunner -L/Users/wincent/trabajo/build/Release -F/Users/wincent/trabajo/build/Release -filelist /Users/wincent/trabajo/build-intermediates/WOTest.build/Release/WOTestRunner.build/Objects-normal/ppc/WOTestRunner.LinkFileList -framework Foundation -arch ppc -prebind -mmacosx-version-min=10.3 -Wl,-dead_strip -isysroot /Developer/SDKs/MacOSX10.3.9.sdk
///usr/bin/ld: warning -L: directory name (/Users/wincent/trabajo/build/Release) does not exist
///usr/bin/ld: warning -F: directory name (/Users/wincent/trabajo/build/Release) does not exist
//
// what should the workaround be? move the setting lower down? eg. to cocoa app, framework, test bundle? override it in the problem target? try dropping it down to debug-style and release-style files?
//
HEADER_SEARCH_PATHS                 = "$(TARGET_BUILD_DIR)" "$(SOURCE_ROOT)"

// Apple recommends that this be switched off; the default (YES) is only for backwards compatibility
ALWAYS_SEARCH_USER_PATHS            = NO

// prevents custom icons from getting stripped as items are being copied to the bundle
COPYING_PRESERVES_HFS_DATA          = YES

// for greater control, perform stripping using a script rather than letting the linker do it
COPY_PHASE_STRIP                    = NO

// Apple's Scott Tooker in a post to the Xcode Users mailing list says:
// "Currently, the general recommendation is to always turn off prebinding if you are targetting 10.3.x or later"
// http://lists.apple.com/archives/xcode-users/2006/May/msg00363.html
// At the time of writing (Xcode 2.2.1), prebinding still defaults to YES (copied from the build settings window):
// "This setting determines if prebinding will be attempted by adding -prebind to linker flags, and defaults to being active for all product types except static libraries."
PREBINDING                          = NO

// symbol separation is only compatible with the STABS debug information format, not DWARF
GCC_ENABLE_SYMBOL_SEPARATION        = NO

// don't use dwarf-with-dsym: invoke dsymutil manually before stripping rather than letting Xcode do it (tries after stripping and fails)
DEBUG_INFORMATION_FORMAT            = dwarf

// target 64-bit in order to use the modern Objective-C runtime
ARCHS                               = $(ARCHS_STANDARD_64_BIT)

// new setting for Leopard-only builds (previously buildtools was used as far back as Panther)
GCC_FAST_OBJC_DISPATCH              = YES

// other Leopard-only settings
GCC_ENABLE_OBJC_GC                  = required

// default to using Cocoa/Cocoa.h as prefix header: override in specific cases (eg. Foundation tool targets)
GCC_PREFIX_HEADER                   = $(SYSTEM_LIBRARY_DIR)/Frameworks/Cocoa.framework/Headers/Cocoa.h

// when using system headers as precomp headers can get better performance and sharing by setting this to NO
// if using custom precomp headers may have to override this and set it to YES
PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR = NO

// once again, this may improve build times but should probably be overriden if using a custom precomp
GCC_INCREASE_PRECOMPILED_HEADER_SHARING = YES

// without this Xcode may try to compile the prefix header twice in projects which have C source files (once for C, once for Objective-C)
// clearly that's not a good idea because the C-version will choke on the Objective-C syntax in the Cocoa headers
GCC_PFE_FILE_C_DIALECTS = objective-c objective-c++
